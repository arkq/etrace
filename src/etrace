#!/usr/bin/env python3
# $Revision: 3.0 $

import os
import re
import signal
import subprocess
import sys

from posix_ipc import O_CREAT, MessageQueue, SignalError

TRACE_TAG_ENTER = b"enter"
TRACE_TAG_EXIT = b"exit"
TRACE_TAG_TERMINATE = b"END"
TRACE_MQ_NAME = "/eTrace"


class Tracer:
    def __init__(self, prog: str, *args):
        self._TRACE_MQ = None
        self.prog = prog
        self.args = args
        self._running = True
        self._stop_counter = 0
        signal.signal(signal.SIGINT, self._stop)

    def __enter__(self):
        self.trace_init()
        return self

    def __call__(self):
        self.trace()

    def __exit__(self, exc_type, exc_value, traceback):
        self.trace_end()

    def trace_init(self):
        self._TRACE_MQ = MessageQueue(TRACE_MQ_NAME, flags=O_CREAT, max_messages=1)

    def trace_end(self):
        self._TRACE_MQ.unlink()
        sys.exit(0)

    def trace(self):
        """Print a program's trace."""
        printer = Printer()
        sym = self.load_symbols()
        self.proc = subprocess.Popen([os.path.abspath(self.prog)] + list(self.args))
        while self._running:
            try:
                message, _ = self._TRACE_MQ.receive()
                tag, addr = message.split()
                if tag == TRACE_TAG_TERMINATE:
                    break
                name = sym.get(int(addr, 16), "??")
                printer(tag, name)
            except SignalError:
                sys.stderr.write("\nSignalError received")
                continue
        sys.stderr.write("\n")

    def load_symbols(self) -> dict:
        """Load symbols from a program's symbol table using nm tool."""
        sym = {}

        pattern = re.compile(r"([0-9a-fA-F]+) (\w) (.+)")
        sp = subprocess.run(["nm", "-BC", self.prog], stdout=subprocess.PIPE, text=True)
        for line in sp.stdout.split("\n"):
            match = pattern.match(line)
            if not match or match.groups()[0] is None:
                continue
            addr, _, name = match.groups()
            addr = int(addr, 16)
            sym[addr] = name

        if "__cyg_profile_func_enter" not in sym.values():
            raise RuntimeError(f"Error: {self.prog} doesn't appear to be instrumented")

        return sym

    def _stop(self, signum, frame):
        sys.stderr.write("\nStopping...")
        self.proc.send_signal(signal.SIGINT)
        if self._stop_counter > 0:
            self._running = False
        self._stop_counter += 1


class Printer:
    def __init__(self):
        self.level = 0
        self.name = None
        self.count = 0

    def __call__(self, tag, name):
        if tag == TRACE_TAG_ENTER:
            self.do_func(name)
            self.level = self.level + 1
            self.name = name
        else:
            self.level = self.level - 1

    def print_func(self, name):
        sys.stderr.write("\n" + self.level * "| " + name)

    def print_totals(self):
        sys.stderr.write(f" (total: {self.count + 1} times)")

    def do_func(self, name):
        if self.name == name:
            # was the counter counting?
            if self.count == 0:
                self.print_func(name)
            self.count = self.count + 1
        else:
            # New name received. Was the counter counting?
            if self.count > 0:
                self.print_totals()
                self.count = 0
            self.print_func(name)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <prog> [arglist]")
        sys.exit(1)
    with Tracer(sys.argv[1], *sys.argv[2:]) as tracer:
        tracer()
