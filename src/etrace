#!/usr/bin/env python3
# $Revision: 3.0 $

import os
import re
import subprocess
import sys

from posix_ipc import MessageQueue, O_CREAT


TRACE_TAG_ENTER = b"enter"
TRACE_TAG_EXIT = b"exit"
TRACE_TAG_TERMINATE = b"END"
TRACE_MQ_NAME = "/eTrace"
TRACE_MQ = None


def trace_init():
    global TRACE_MQ
    TRACE_MQ = MessageQueue(TRACE_MQ_NAME, flags=O_CREAT, max_messages=1)


def trace_end():
    TRACE_MQ.unlink()
    sys.exit(0)


def load_symbols(prog: str) -> dict:
    """Load symbols from a program's symbol table using nm tool."""
    sym = {}

    pattern = re.compile(r"([0-9a-fA-F]+) (\w) (.+)")
    sp = subprocess.run(["nm", "-BC", prog], stdout=subprocess.PIPE, text=True)
    for line in sp.stdout.split("\n"):
        match = pattern.match(line)
        if not match or match.groups()[0] is None:
            continue
        addr, _, name = match.groups()
        addr = int(addr, 16)
        sym[addr] = name

    if "__cyg_profile_func_enter" not in sym.values():
        print(f"Error: {prog} doesn't appear to be instrumented")
        trace_end()

    return sym


def trace(prog, *args):
    """Print a program's trace."""
    printer = Printer()
    sym = load_symbols(prog)
    subprocess.Popen([os.path.abspath(prog)] + list(args))
    while True:
        message, _ = TRACE_MQ.receive()
        tag, addr = message.split()
        if tag == TRACE_TAG_TERMINATE:
            break
        name = sym.get(int(addr, 16), "??")
        printer(tag, name)
    sys.stderr.write("\n")


class Printer:

    def __init__(self):
        self.level = 0
        self.name = None
        self.count = 0

    def __call__(self, tag, name):
        if tag == TRACE_TAG_ENTER:
            self.do_func(name)
            self.level = self.level + 1
            self.name = name
        else:
            self.level = self.level - 1

    def print_func(self, name):
        sys.stderr.write("\n" + self.level * "| " + name)

    def print_totals(self):
        sys.stderr.write(f" (total: {self.count + 1} times)")

    def do_func(self, name):
        if self.name == name:
            # was the counter counting?
            if self.count == 0:
                self.print_func(name)
            self.count = self.count + 1
        else:
            # New name received. Was the counter counting?
            if self.count > 0:
                self.print_totals()
                self.count = 0
            self.print_func(name)


if __name__ == "__main__":

    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <prog> [arglist]")
        sys.exit(1)

    trace_init()
    trace(sys.argv[1], *sys.argv[2:])
    trace_end()
